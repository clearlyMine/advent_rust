use std::collections::HashMap;

use itertools::Itertools;

fn main() {
    let input = include_str!("../input_day_17.txt");
    let mut lines = input.lines();
    let line = lines.next().unwrap();
    let res1 = process_part_1(line);
    println!("Part 1:{}", res1);
    let res2 = process_part_2(line);
    println!("Part 2:{}", res2);
}

//NOTE: Coordinates are in the form (y,x)
fn process_part_1(input: &str) -> u128 {
    let moves: Vec<bool> = get_moves(input);
    let mut current_top = 0;
    let start_x = 2;

    let mut grid: Vec<Vec<bool>> = vec![vec![false; 7]];
    let mut total_rocks = 1;

    let mut current_rock = 1;
    let start_of_rock = (current_top + 3, start_x);
    let mut rock = get_rock(current_rock, start_of_rock);
    let mut move_num = 0;
    for _ in 0..(rock.top - current_top) {
        grid.push(vec![false; 7]);
    }
    while total_rocks < 2023 {
        let mv = moves[move_num];
        move_num += 1;
        if move_num == moves.len() {
            move_num = 0;
        }
        //check if the next move is possible
        if mv {
            //check if touching wall
            if rock.left != 0 {
                //check if touching another rock
                let mut dont_move = false;
                for edge in &rock.coords {
                    if grid[edge.0 as usize][edge.1 as usize - 1] {
                        dont_move = true;
                    }
                }
                //move left
                if !dont_move {
                    rock.move_rock_left();
                }
            }
        } else {
            //check if touching wall
            if rock.right != 6 {
                //check if touching another rock
                let mut dont_move = false;
                for edge in &rock.coords {
                    if grid[edge.0 as usize][edge.1 as usize + 1] {
                        dont_move = true;
                    }
                }
                //move right
                if !dont_move {
                    rock.move_rock_right();
                }
            }
        }
        let mut final_destination_reached = false;

        //check if the rock is touching the bottom
        if rock.bottom == 0 {
            final_destination_reached = true;
        }
        if !final_destination_reached {
            //check if rock's bottom is touching another rock
            for edge in &rock.coords {
                if grid[edge.0 as usize - 1][edge.1 as usize] {
                    final_destination_reached = true;
                    break;
                }
            }
        }
        if !final_destination_reached {
            rock.move_rock_down();
            continue;
        }

        //------>move to the next rock
        //set all the coordinates of the rock in the grid to true
        for c in &rock.coords {
            grid[c.0 as usize][c.1 as usize] = true;
        }

        current_rock += 1;
        if current_rock == 6 {
            current_rock = 1;
        }
        current_top = current_top.max(rock.top);
        let start_of_rock = (current_top + 4, start_x);
        rock = get_rock(current_rock, start_of_rock);

        total_rocks += 1;
        //fill the grid upto the top of the rock with falses
        if rock.top > grid.len() as u128 - 1 {
            for _ in 0..(rock.top - (grid.len() as u128 - 1)) {
                grid.push(vec![false; 7]);
            }
        }
    }
    current_top + 1
}

fn process_part_2(input: &str) -> u128 {
    let moves: Vec<bool> = get_moves(input);
    let target = 1_000_000_000_000;
    let mut current_top = 0u128;
    let start_x = 2;

    let mut grid: Vec<Vec<bool>> = vec![vec![false; 7]];
    let mut total_rocks = 1u128;

    let mut current_rock = 1;
    let start_of_rock = (current_top + 3, start_x);
    let mut rock = get_rock(current_rock, start_of_rock);
    let mut move_num = 0;
    for _ in 0..(rock.top - current_top) {
        grid.push(vec![false; 7]);
    }
    let mut seen_state: HashMap<(u64, u64), (u128, u128, u128)> = HashMap::new();
    let mut added_by_repeats: u128 = 0;
    while total_rocks <= target {
        let mv = moves[move_num];
        move_num += 1;
        if move_num == moves.len() {
            move_num = 0;
        }
        //check if the next move is possible
        if mv {
            //check if touching wall
            if rock.left != 0 {
                //check if touching another rock
                let mut dont_move = false;
                for edge in &rock.coords {
                    if grid[edge.0 as usize][edge.1 as usize - 1] {
                        dont_move = true;
                    }
                }
                if !dont_move {
                    //move left
                    rock.move_rock_left();
                }
            }
        } else {
            //check if touching wall
            if rock.right != 6 {
                //check if touching another rock
                let mut dont_move = false;
                for edge in &rock.coords {
                    if grid[edge.0 as usize][edge.1 as usize + 1] {
                        dont_move = true;
                    }
                }
                if !dont_move {
                    //move right
                    rock.move_rock_right();
                }
            }
        }
        let mut final_destination_reached = false;

        //check if the rock is touching the bottom
        if rock.bottom == 0 {
            final_destination_reached = true;
        }
        if !final_destination_reached {
            //check if rock's bottom is touching another rock
            for edge in &rock.coords {
                if grid[edge.0 as usize - 1][edge.1 as usize] {
                    final_destination_reached = true;
                    break;
                }
            }
        }
        if !final_destination_reached {
            rock.move_rock_down();
            continue;
        }

        //------>move to the next rock
        //set all the coordinates of the rock in the grid to true
        for c in &rock.coords {
            grid[c.0 as usize][c.1 as usize] = true;
        }

        current_top = current_top.max(rock.top);
        //Logic copied from https://nickymeuleman.netlify.app/garden/aoc2022-day17
        if added_by_repeats == 0 {
            let key = (current_rock as u64, move_num as u64);
            if let Some((2, old_rock_count, old_top)) = seen_state.get(&key) {
                let delta_top = current_top - old_top;
                let delta_rock_count = total_rocks - old_rock_count;
                let repeats = (target - total_rocks) / delta_rock_count;
                added_by_repeats += repeats * delta_top;
                total_rocks += repeats * delta_rock_count;
            }
            seen_state
                .entry(key)
                .and_modify(|(amount, old_rock_count, old_top)| {
                    *amount += 1;
                    *old_rock_count = total_rocks;
                    *old_top = current_top;
                })
                .or_insert((1, total_rocks, current_top));
        }

        current_rock += 1;
        if current_rock == 6 {
            current_rock = 1;
        }
        let start_of_rock = (current_top + 4, start_x);
        rock = get_rock(current_rock, start_of_rock);

        total_rocks += 1;
        if rock.top > grid.len() as u128 - 1 {
            for _ in 0..(rock.top - (grid.len() as u128 - 1)) {
                grid.push(vec![false; 7]);
            }
        }
    }
    current_top + added_by_repeats + 1
}

fn get_rock(num: u8, start_of_rock: (u128, u128)) -> Rock {
    match num {
        1 => Rock {
            coords: vec![
                start_of_rock,
                (start_of_rock.0, start_of_rock.1 + 1),
                (start_of_rock.0, start_of_rock.1 + 2),
                (start_of_rock.0, start_of_rock.1 + 3),
            ],
            left: start_of_rock.1,
            right: start_of_rock.1 + 3,
            bottom: start_of_rock.0,
            top: start_of_rock.0,
        },
        2 => Rock {
            coords: vec![
                (start_of_rock.0, start_of_rock.1 + 1),
                (start_of_rock.0 + 1, start_of_rock.1),
                (start_of_rock.0 + 1, start_of_rock.1 + 1),
                (start_of_rock.0 + 1, start_of_rock.1 + 2),
                (start_of_rock.0 + 2, start_of_rock.1 + 1),
            ],
            left: start_of_rock.1,
            right: start_of_rock.1 + 2,
            bottom: start_of_rock.0,
            top: start_of_rock.0 + 2,
        },
        3 => Rock {
            coords: vec![
                start_of_rock,
                (start_of_rock.0, start_of_rock.1 + 1),
                (start_of_rock.0, start_of_rock.1 + 2),
                (start_of_rock.0 + 1, start_of_rock.1 + 2),
                (start_of_rock.0 + 2, start_of_rock.1 + 2),
            ],
            left: start_of_rock.1,
            right: start_of_rock.1 + 2,
            bottom: start_of_rock.0,
            top: start_of_rock.0 + 2,
        },
        4 => Rock {
            coords: vec![
                start_of_rock,
                (start_of_rock.0 + 1, start_of_rock.1),
                (start_of_rock.0 + 2, start_of_rock.1),
                (start_of_rock.0 + 3, start_of_rock.1),
            ],
            left: start_of_rock.1,
            right: start_of_rock.1,
            bottom: start_of_rock.0,
            top: start_of_rock.0 + 3,
        },
        5 => Rock {
            coords: vec![
                start_of_rock,
                (start_of_rock.0, start_of_rock.1 + 1),
                (start_of_rock.0 + 1, start_of_rock.1),
                (start_of_rock.0 + 1, start_of_rock.1 + 1),
            ],
            left: start_of_rock.1,
            right: start_of_rock.1 + 1,
            bottom: start_of_rock.0,
            top: start_of_rock.0 + 1,
        },
        _ => panic!("no rock of this number available"),
    }
}

#[derive(Debug, Clone)]
struct Rock {
    coords: Vec<(u128, u128)>,
    left: u128,
    right: u128,
    bottom: u128,
    top: u128,
}

impl Rock {
    fn move_rock_down(&mut self) {
        for c in &mut self.coords {
            c.0 -= 1;
        }
        self.bottom -= 1;
        self.top -= 1;
    }

    fn move_rock_left(&mut self) {
        for c in &mut self.coords {
            c.1 -= 1;
        }
        self.left -= 1;
        self.right -= 1;
    }

    fn move_rock_right(&mut self) {
        for c in &mut self.coords {
            c.1 += 1;
        }
        self.left += 1;
        self.right += 1;
    }

    fn print(&self) -> String {
        let mut out: String = "Rock {\n\tcoords:[".to_string();
        for c in &self.coords {
            out += format!("({},{}),", c.0, c.1).as_str();
        }
        out += "],\n\tleft: ";
        out += self.left.to_string().as_str();
        out += ",\n\tright: ";
        out += self.right.to_string().as_str();
        out += "},\n\ttop: ";
        out += self.top.to_string().as_str();
        out += ",\n\tbottom: ";
        out += self.bottom.to_string().as_str();
        out
    }
}

fn get_moves(input: &str) -> Vec<bool> {
    input.chars().map(|p| p == '<').collect_vec()
}

#[cfg(test)]
mod tests {

    use super::*;
    #[test]
    fn test_process_part_1() {
        let input = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>";
        assert_eq!(process_part_1(input), 3068);
    }

    #[test]
    fn test_process_part_2() {
        let input = ">>><<<<>><<<<>>>><<><<<<>><><<<><<<<>>><<<<><<>>>><<<<>><<<<>><<<>><>><<<>><>><<>>><<>><<<>>><<<<>>><<<<>>><<<<><<<<><>>><<<>>>><<>><<<><<<<><<<>>><<<<>>>><<<><<<><>>><<><>><<<<>>><>>>><<>>>><<<<><<<<><<<<>>><<>><><<<>><<<><<>>><<>>><>><>>><>>>><<<<>><<>>><<<>><<><<>><<<<>>><>><><>>>><<<<><>><<>><>>>><<>>><<>>><<>>><><<<<>>><<<>>><><<>>>><<<>><<<>>>><<>><<<>><<<>>>><>>>><<>><<<<>><<<>>><<>>><<>><<<>>>><<>><<<>><>>>><>><<<>>>><><<>>><<>>>><>><><<<<>>><<>><<>><<<<>><>>>><<<<>>>><<<>>><<<<>><<<<>>><<<<>>><<>>>><<>><>>><<><<<>>>><<<<>><<>><><<<<>>>><<<<><<<>><><<<><<>><>><<<<>><<><<<>><>><>><>>>><<<><>>><>>>><<<<>>><<<>>>><>>><>>><<<><<<>>><<<<>>><<><<<<>>>><<<<><<>>>><<>><<<<>>>><>>>><<>><<>><<><>>>><><><<<<>>><<<>>><<<<>>>><<>>><<<<>>>><><<><<<<>>><<<<>>>><<<>><>><<<<>>>><><>>>><>>><<><<<<>><<<<>>>><<>>><<>>>><>>><<>>><><<<<>>><<<>><>>>><<<><<<<>>>><<<<>><>><<>>>><<><>><>>><<>>>><<<<>>><<<<>>><<<>><<>><<>>><>><>><<<<>><<<>><><<<>><<<>>>><<<<><<<<>>><><<<><<>>><<<>>><<<<>>><<>>><<<><<>>><<<>>>><<<<>>><>>>><<>><>><<<<>><<<<>>>><<>><<<<><>><<<<>>>><>>><<<<>>><>><<<<><<<><<<>><><<<>>>><><<<>><>>><<<<>>>><<<<>>>><<>><<<<>><<<><<>>>><<<>>><<<><<><<<<>>>><<><<>><<>>>><<<<><><<<<>>>><<<<>><>>><<<>>><<<>><<<>><<>><<<<>>><<<<>>>><<<><>>>><<>><<>>>><<<><>>><><><<<>><<><<<><<<<>>>><<<>>><<<>>><<<<><><<<>>><<<<>>>><<>>>><<>><<>>><>>><<<>><<<<>>><<<<>><<<<>>><<><<<>>><<<>><<><<><<<<>>>><>>>><<>>><<<<>>>><<<<>><<<>><<<<>>>><<<>>>><<><<<><<<>>>><<<<>>><<<<>><<>>>><>><><<<>>><<<>>>><<<<>><<>>><><>><<<>>><<<>>>><<>>>><<<<><><>>>><<>><<<>><<<<>>><<<>>><<<>>><<<>>>><<>>><<>>>><><><>><<<<>>><<<<>>>><<<><><<<<><<>><<<<>><<><<<><<<>><<><<<>>>><>><><>><<<>>><<<<>>>><<<<>><<>><><<<>>><>>>><>>><<<<>>><><<<><>>>><<<><<>><<<>><>>><><<<<>><<>>>><<>>><<<>>><<<<>><>>><>>><<<>>>><<>>><><<<><<<>>><<<>>><<<<>>>><<<>><>>>><<<<>>>><<<>>>><<>>>><<<><<<<>><<<<><<><<>>>><<<<>><><>>><<>>>><>>><<<<>>><<<<>><<<><<<>>><<><<>>><<>><<<>>>><>>><<<<>>><<<>>><>>>><<<<>>><<<<>>><><<<<>>><><<<><<<>>>><<><<>><><<<<>>>><<<<>><<>>>><<><<<<>>>><<<<>>>><>>><<<>>>><<<<><>><<><<<>>><<<<><<<<>>>><>><>>><<<>>>><><<<<><<<<>><<<>><<<<><<<>>><><<<<>><<>><<<>><<<>>><<><<<>>><<><><<<<>>>><<>><<<><>>>><>>>><<>>><>><><<<>>><>>>><><<<<><>>><<>>>><<>><<>>>><<<>>>><<<<>>>><<<>><<<<>><<><<<>>><>>><<<>>><<<<>><<>>>><>>><<>>><<<>>><>><>>><<>><<<<>>><>><<>>>><<<<><<<<>>><<<><><><>>><<>>><<<<>>>><<<<>><>><<<<>>><<>><>>><<<>>>><<<<>>>><><><<<>>>><><<<>>><<<<>>>><<>>>><<<>>>><<><<<>>><<<<>>><<>>>><><>>><><>>><<<<>>>><<<>><<>>>><<><<>>><>><><>>><<<<>>><<>>><<<<>>><<<>>><>><<>>><<<>><>>>><<<>>><>>><<<>>>><<<<>>>><<<<><<<>>>><<<>>><<>>>><<<<><<<<>>><<<>><<<><<<>>><<<<>><<>><<<>>>><>>>><<<<><<<<>><<>><<>><<<><<<<>><<<>><<<<>>>><>>>><>><><<>>>><<<<>><<>>>><>>><<>>><<<<>>><<<>>><<<>>>><<>>>><>>>><><>><<<>><<<<><<<<>>>><<<>>>><>>><<<><<>>>><<<>>><>>>><<><<<><<<<>><<>>>><<<>><<<<><<><>>><>><>><>>>><<<>>><<>><<<<>>><<<>><<<<>>>><><<><<<>>>><<>>><<<><<><<<><<<<><>>><>><<<><<<>><<<><<>><<<<>>><<>>><<>>><<<<><>><<><<<<>><<<<>><<<<><>>><<<<>><<>>>><>><>>>><<<<>>><<<<>><><<<>><<>>>><>>>><<>>><><<>>>><<><<>><<<>><>>>><<<<>><<<><<><<>><<<>><<<>><>><>>>><<<<>>><<<<>>><<<>>>><>><<<>>>><<<<><>>><>>>><<>><<<<>><<<<>>><<<<>>><<<<><<<>>>><>>>><<<>>><<<>>>><<<>>>><<<<>>><<<<>>><<<><>>><<<<>>>><<<<><>>>><<>><<<>>>><<><<<<><>><><<>>><<<<>>><<<<>>>><<<<>>>><<>><<<<>>><<<<>>>><<>>>><<<>>><<<<>>>><<<><<<<><<>><<<<>>><<<<>>><>>>><>><<<<><<<>>><>>>><><<<><<<>><>>><<>><>><<<><>>><<><<<>>><>>><<<<><>>><<><<><<<<><<<>>><<<<>>><>>>><>><<<<>><<>><<<<>>><<<>><>><<<><>>>><>><<><><>>>><<<<><>>><<><<<<>><<<<><>>>><<>>><<<>><<<>>>><<>>><>>>><<<>>>><<>>><<<>>>><<<>><>>>><<><>>>><>>><>>>><<<>>>><<<<>>>><<>>><<>>><<<<>>>><>>>><<><>><<<<>>><><<<><<<<>>>><<<<>>>><<>>><<<>><<<>><<<>>>><<<<>>>><<<<>><<>>><<><<>>>><>><>><>>><<>><<<>>><<<<>><<>><<<<>>><>>>><<<<><<<>>>><>>><<>><>>>><>>>><><<<<>><<<><<<<>>>><<<>>><<<<>>>><<<<>>><<<>>><>>><<<>>>><>>>><<<<>>><<<<><<><<<<><<<<><>>>><<><>>>><<>><<<>><>>><<<<>><>><<<><<>>>><<>>>><>>><<<><<<>><>>><><<>>><<><<>>><<<>>>><<<<>><<><<<<>>>><<<<>>>><<<<><<<<>>><<<<><<<><>>><<>>>><<>>>><<<<>>><<<>>><<<>>>><<<<>>><>>><<>>>><<<<>>>><<<>><<<>>>><<<>><><<<>><><<<>>><><<<><>>>><<>><<<<>>>><<<>>>><<>>><<<<><<<<>>>><<>>><<<<>>>><>>><<<>>><<<<>>>><<>>><<>>><<>>><<<>><<><<>><><>><>>>><<<<>>><<<<>>>><<<><<>>><<<><<<>>>><<<<>>><<<<>>><<<<>><<<<>>><<<<>>><<<><<<><<<<><<>>><><<<>>><<>>>><<>>><>>>><<<>>>><<<<>>><>>>><<>><<<>>><<<>><>><<><>>><<<><<<<>>>><<>><<<>><>>>><<<>><<>><<>>>><><>><>>>><<<><<<<><><>>>><<>>>><<<>>><><<>><<<<><<<<>>><>>><<>><<<>>>><<<<>>>><><<<<>><<<<>><<><<>>>><<><<<<><>>>><<>><<<>><>><<<<><>>>><>><<>><<>>>><<<<>>><<<<>>>><<>>>><<<<>>><<<>>><><<<>>>><><>>><<<><<><<<<><<<>>><<>>><<>>>><<<><<<<>>>><<<>>>><<><<<<>>>><<<<>>><<<>>><<>>><><>>><<<<>>>><<><<<>>>><<<<><<><><<><<<<>><<<><<<<>><<>><<>>><>><>><<<<>>>><>>><><<>>>><<<>>><<<<>>>><<<<><>>>><<<>><>>><<<<>>>><<><<>>><<><>>><<>><<<<>><<<>><<>><<<><<>>>><<>><>>><>>><<<>><<<<>><<<><<>><<<<>>>><<<<>>><><<<<>>>><<><>>><<<>>>><<><>>>><<<<>><>><<<>><<>><<<<>>>><<<>>>><<<>><>>>><>>>><>>>><<<<>>>><<>>>><<<><<>>>><<><<<><<<>>>><<<<>>>><<<<>><>>>><>>><<><<<><>><<>>><>>>><<>>>><<<<>>>><>>><>><<>><<<>><<<><><<<<>>><<<<><<>>>><>>><<>><<>><<<<><<<<><<<>><<<<>>>><<><<<><<<<>>><<<>>>><<<<>><>><<<><><<<<>><<<<>><>>>><<<<>>><>>>><>><<>>>><<<>>><<>>><>>>><>><>>><>>><<><<>>><<>><<<>><<<>><<<>>><><>>><>>>><<>>>><<<<>><>>>><>>>><>><<>>><<<<>>>><<>><><<>>><<<>>><<<>>>><<><<<<><>>>><>>><<<>>><<<><<<<>>><>>>><<>>><<>>>><><<>><<>>><>>><>>><<><<<><>><<<>>><>><<<><<>>>><<<>>><<<<>><<>>>><>>>><<<<>>><<<<><<<<>><<<><<>>>><><<<<>><<<><<<>>>><<<>><<<<>>><<<><<<>>>><<><>>><<<>><<<<><<<>>><<<>><>><<<>>>><>>><<><<>>><<<>>>><<<<>>><<<<>>><<<<><><><<>>><<>><<<>>>><<<>>>><><<<>>>><>>><<>><<>><>>><><<>><<<<>><<<<>>><<><<>>><<>>><<><<<<><<<>><><<>>>><<<<>>><<<>>><<<<><<<<><<>><<<><<>>>><>>><<<>>>><<<>>>><>>><>><<>><<>>><<>><<<<>><<>><<<>>><<<<><>>><>><<<><<>><<<<><<<><<>><<>>>><>>>><<><<><<>><>>>><><><<<<>>><><<>>>><<<><<<<>><<<<>><><<<><>>>><<<>>>><<>><<<>>><<>>>><<<<>>>><><<<>>><<<<><<<><<<><<<<>>>><>><<<<>>>><>>>><<<<>>><>>>><<<<>><<<>>>><<<<>>>><<>>>><<>><<<<>><<<><<<<>>><>><<<<>><>>><<<>>><<<<>>>><>><<><<>><><<<<>>>><<<<>><>>>><<<>>>><<>>>><>>>><<><>>>><<<<>>>><<<<>><<<<>>><><<><<<><<<<>>><>><<>>><<>>>><<<>>>><<>>><<<>>>><<><>>>><<<><><<<><<<>><<<><<<<>>><<><<<<>><>>><>>><>>><><>><<>>><<<<>>><>>><<<<><<<>>>><<>><<<<>>>><<<>><><<<<><<<<>>>><<>><<>>>><<>>>><><<<<>>><>>><<>><<<<>>>><>>>><<<<>><<>>><<<>>><>>>><<<>>>><<<><<><<><<<>>>><>>><<<>><<<>><<<<>>>><<<>><<<<>>><<>>><<<>>>><><<>>>><<<>>><<<>>>><<<<>><<>>><<<<>><<>>><>>><<<<><>>>><<<><>>>><<<<>><<<<><>>>><<<<>><>><<<<><<>>><<<<>>><><<<<><>>>><<<<><<<<>><<<<>>><<>>><<<<><>>>><<>>>><><<<>>>><>><<<>>><<<<><<>>>><<<<>>><><>>><>><<<>><<<<>>>><>>>><<<<>>><<<<>>><<>><<<>>>><<<>>><<>><>><><><<<><><<<>>><<<<>><<<<>><>>>><<>><><<>><<<<>>>><>><>>><>>><<<>>><<><>><><<<><<>>>><<<<>>>><>>><<<<>><<<>>><><<<<><<<>><<><<<><<>>><<<>>><<<>>>><><<>>><<<<><<<>>>><<>>><>><<<<>>>><<<<>>>><<>>><<>>>><<<<>><<<<>>>><<<<>><<>><>>><<>>><<>>>><<>>>><<<>>>><<<<>>>><<<><<<>>>><<<<>>>><<>>>><<<<>>>><<<><><>>><<>><<<<>>><<<<>>><><<><<<<><<><<<<>>><>>><<<<>>><<<<>><<<<>>>><<><<>><<>><<<<>>>><<<<>><><<>><>>>><>><><>>>><<<><<>>><<>>>><<><<<<><<>><>>>><>>>><<<<>>>><<<>>><<>><<<><<<>>><<>><<<><>>>><>>>><<>><>>>><<>><<<<>><>>><<>><<>>><<<<>>><<<><<<<>>><<<<>>><<<>><<>>><<<<>>><><<<<>>><<<<>>>><<<<>>>><><<>>>><<>>>><<<<>>>><>>><<<<><<>><<<>>><<<<>>>><>>><<<><<>>>><<<<>><<<><>>>><<<<>>><<<>>>><>>><<><>>>><<<<><<<<>>><<<>><<<><<<>>>><>>>><<<<><<>><<<><<>>>><<<>>>><>><<>>><<<><<<>><>>>><<>><<>>>><<<<><<<>><<<<><<>>><>><<<>>><<>><<><<<>>>><<<<>>><><<<<>><<>>>><<<<>>><>><<>><<>>>><<<><<>>>><<>>><<<>>><<<<><<<>><<<<>>><<>>><<<>><<<><<<<>>>><<<><<>><<<>><<>>><>>>><<<>>>><<>><<>>>><<>><<<<><>>>><<<>>>><<>>>><<<>><<<<><<<<>><<<<>>><<<<><<<<><<<><<<<>><<<<>>>><<<<>>><<<<>>><>><><><<>>><<>><<<<>><>>>><>><<<>>><>><>>><<<><<<><>>>><<><>><<>><><<>><<><<<>><<<>>><<>><<<><><<>><<<>><<<><<<>><>>><<<>>><<<>>><>>>><>>>><<<><>><<>><<<<><<<<>><<<<>><<<>>><<<>><<><<><<>><<><<><>>>><<<><<><<>>><<<>><<<>><<>>><<<<><<<<>>><<<<>><<><>><<>><<><<<><<<>>><<>>>><>><<<<><<<<>>>><<<<>>><>>><<>>>><<>>>><<>>><<<>><<<><<<<><<<<><<<<>>><<<>>>><<<<>><>><<<>>><<>>><<<<><>>>><<>>><<<<>>><<>><><<>>>><><<<>><>>><<><<<>>>><<<>>><<<><<<>>><>><<<><<<<>><<<<><<><<>>>><><<<<>>>><>><<>><<><<<><<<<>>><><<><<<<>>>><><<<<>>>><<>><<<>>>><>>>><<<<>>><<>>><><<<<>>>><><>>><<>><<<<>>><<<<><<<<><><<<<>>><<<<>>>><<><<>>>><<<>>><<>>><<><<<<><<>><>>><<<>>>><<<><<<<>>><<<>>>><<<<>><<<<>><<<<>><<<<><<<<>>>><<<<>>>><<<>>><<<>>><<<<>><><<<<>><>>>><<<<><>>>><<<<>><<>>><>><<<><<<<>>>><><<<><<>>>><<<<><<<><>>><<><>>>><<<<><<>>><<>>><<>>><<<>>><>>>><<<>>>><><<<<>>><<<<>>><<<<>>>><<<>>>><<>>><<>>>><<<<><>>>><>><<<<>>><<<<>>>><<<>>><<<>><<<>><<<>><>><>>>><>><<>><<<<><>>><<<<>>><>>><>>>><<<<>>><>>>><<><<<>>><>>><<<<>><<<>><<<<>><<<>>>><>>>><<<>>><<<<>>>><<<<>>>><<<>>>><><<<><<<>>>><<<><<<<>>>><<<>>>><>>><<<<><<<>><<<><<>><<>><<<<><<>>>><<<>>>><<<<>><>><>>>><>><<<><<><<<>>><<<<>>><<>><<<<>><><>><>><<>><>>>><<>>>><<>>><<<><>>><<<>>>><>><>>>><<<<><<>>><<<>>><<>>><>><><<<<>><><>>>><>><<<>><<<><<><>>><<<<><<<<>>><<>>>><<><<<<>>><<<>><<<<>>><<>>>><<>>>><<>><<<<>><<><<<><<<<>>>><><<>>><<<>>>><>>>><<><<<<>>>><<<>><>>><<<<>><<<<>>><<<><>>><<<>>><>>><<<<>><>>>><<<<>>><<><<<<>><<><<<<><<>><<<>>>><<<>><<<>>><<<>>>><<<<><<<>><<>>>><<>>>><>><<<<>>>><>>><<<><<>>><<<><<>>>><<<>>><<<>>><>><<<>>><<<<>><<>>>><<>>><<>>><<<>>><><<<>>><<>>>><>>><<>>><<>><<<><>>>><<>>>><<<<>><<>>><<<<>><<>><<>><<<>><<><>>><><<<>>>><><<>>><<>>><<<>>><<><><<<<>>><<<<><<>>>><<>><<<>>><<<>>>><>>><<<>>><<<<><<<>>><<<>><>><<><<<<>>><<>>>><<>><><<<<>>><<<<>>><<<<>>><<>><<>><<>><>><<<><>>><><>>>><<<>>><>>><<>>><<<><<>>>><<<><<<<>>><<<><<<><<<<>><<<<>><>>>><<<>>><<<><<<<>><<<<>><><<<<><<<<><<<>><<<>>>><>><<<>>><<>>><>><<<<>><<<><><<<<>>>><<<<>><<<>>>><<<<><<<>>>><<<<>>><<<>>><<>>>><>>>><<<<>><<<<>><<><<>><>>>><<>>>><<>><>>><<>>>><><<><>>><<><<<<>>>><<>>><<<<>><>>><<<<>><<<>><>>>><<<><<><<<>>><>>>><>>><<<>>><<>>><<<<><<<>>><>>><><<<>><<<>>><<<<>><<>>><<<<><>><>><><>>><<>><<";
        assert_eq!(process_part_2(input), 1532183908048);
    }
}
